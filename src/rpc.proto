syntax = "proto2";
package rpc;

message Rpc {
	required Type type = 1;
	optional RequestVote voteReq = 2;
	optional RequestVoteRes voteRes = 3;
	optional AppendEntries appendEntriesReq = 4;
	optional AppendEntriesRes appendEntriesRes = 5;
	optional RequestHandshake handshakeReq = 6;
	optional RequestHandshakeRes handshakeRes = 7;
	enum Type {
		REQUEST_VOTE = 0;
		REQUEST_VOTE_RES = 1;
		APPEND_ENTRIES = 2;
		APPEND_ENTRIES_RES = 3;
		REQUEST_HANDSHAKE = 4;
		REQUEST_HANDSHAKE_RES = 5;
	}

	message RequestVote {
		required int32 candidateTerm = 1;
		required int32 candidateId = 2;
		required int32 lastLogIndex = 3;
		required int32 lastLogTerm = 4;
	}

	message RequestVoteRes {
		required int32 term = 1;
		required bool voteGranted = 2;
		required int32 id = 3;
		required int32 candidateTerm = 4;
	}

	message AppendEntries {
		required int32 leaderTerm = 1;
		required int32 leaderId = 2;
		required int32 prevLogIndex = 3;
		required int32 prevLogTerm = 4;
		repeated LogEntry entries = 5;
		required int32 leaderCommit = 6;
	}

	message AppendEntriesRes {
		required int32 term = 1;
		required bool success = 2;
		required int32 id = 3;
		required int32 leaderTerm = 4;
		optional int32 lastLogIndex = 5;
	}

	message RequestHandshake {
		required int32 id = 1;
	}

	message RequestHandshakeRes {
		required int32 id = 1;
	}
}

message LogEntry {
	required string command = 1;
	required int32 term = 2; // term when entry was received by leader
}

